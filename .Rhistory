mydiff1new
c
mydiff1new[2:4] = mydiff1[2:4] + myval
for (i in 3:5){
newc[i] = c[i-1] + mydiff1new[i-1]
}
newc
newc
mydiff1new = mydiff1
mydiff1new[2:4] = mydiff1[2:4] + myval
for (i in 3:5){
newc[i] = c[i-1] + mydiff1new[i-1] +1
}
newc
1628+178
1929+178
for (i in 2:5){
newd[i] = newc[i] + mydiff1new
}
newd
for (i in 2:5){
newd[i] = newc[i] + mydiff1new[i]
}
newd
newc
newd
2107-2284
mydiff1new
for (i in 3:5){
newc[i] = newc[i-1] + mydiff1new[i-1] +1
}
newc
for (i in 2:5){
newd[i] = newc[i] + mydiff1new[i]
}
newd
newc
newd
mydiff2new = mydiff2
mydiff2new[2] = mydiff2[2] + myval
mydiff2new[3] = mydiff2[3] - myval*8
mydiff2new[4] = mydiff2[4] + myval
mydiff2new
mydiff2 = f-e
mydiff2new = mydiff2
mydiff2new[2] = mydiff2[2] + myval
mydiff2new[3] = mydiff2[3] - myval*8
mydiff2new[4] = mydiff2[4] + myval
mydiff2new
mydiff2new = mydiff2
mydiff2new[2] = mydiff2[2] + myval
mydiff2new[3] = mydiff2[3] - myval*8
mydiff2new[4] = mydiff2[4] + myval
mydiff2new
newe[1] = newd[5] + 1
newf[1] = newe[1] + mydiff2new[1] +1
for(i in 2:5){
newe[i] = newe[i-1] + mydiff2new[i-1] +1
newf[i] = newe[i] + mydiffenew[i]
}
newe
newf
newf[i] = newe[i] + mydiffenew[i]
newe[1] = newd[5] + 1
newf[1] = newe[1] + mydiff2new[1] +1
for(i in 2:5){
newe[i] = newe[i-1] + mydiff2new[i-1] +1
newf[i] = newe[i] + mydiff2new[i]
}
newe
newf
mydiff2new = mydiff2
mydiff2new[2] = mydiff2[2] + myval
mydiff2new[3] = mydiff2[3] - myval*8
mydiff2new[4] = mydiff2[4] + myval
mydiff2new
newe[1] = newd[5] + 1
newf[1] = newe[1] + mydiff2new[1] +1
for(i in 2:5){
newe[i] = newe[i-1] + mydiff2new[i-1] +1
newf[i] = newe[i] + mydiff2new[i]
}
newe
newf
newf[i] = newe[i] + mydiff2new[i]
newf[1] = newe[1] + mydiff2new[1] +1
newe[1] = newd[5] + 1
mydiff2new[1]
newe[1] + mydiff2new[1] +1
newf[1] = newe[1] + mydiff2new[1] +1
newf = rep(0,5)
newe[1] = newd[5] + 1
newf[1] = newe[1] + mydiff2new[1] +1
for(i in 2:5){
newe[i] = newe[i-1] + mydiff2new[i-1] +1
newf[i] = newe[i] + mydiff2new[i]
}
newe
newf
newf = rep(0,5)
newe[1] = newd[5] + 1
newf[1] = newe[1] + mydiff2new[1]
for(i in 2:5){
newe[i] = newe[i-1] + mydiff2new[i-1] +1
newf[i] = newe[i] + mydiff2new[i]
}
newe
newf
6503-3496
6504-7228
724/10000
mydiff1new
newg; newh = rep(0,5); rep(0,5)
newg = rep(0,5); newh = rep(0,5);
newg = rep(0,5); newh = rep(0,5);
newg[1] = newf[5] + 1
newh[1] = newg[1] + mydiff1new[1]
for(i in 2:5){
newg[i] = newg[i-1] + mydiff1new[i-1] +1
newh[i] = newg[i] + mydiff1new[i]
}
newg
newh
4496/1005000
18095/5354000
4.6/3.4
3.4/4.6
1-0.7391304
4496/18095
6710+1945
8655/22691
6710/4980
x=rnorm(100)
y = x + rnorm(100)
g <- gl(2, 50)
x
y
g
g <- gl(2,50, labels = c("M", "F"))
x
subset(x, g=="M")
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "b")
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
table(pollution$region)
reg<-table(pollution$region)
reg
barplot(reg, col="wheat")
barplot(reg, col = "wheat", main = "Number of
| Counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
with(data=pollution, boxplot(pm25~region, col="red"))
boxplot(data=pollution, pm25~region, col="red")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east=subset(pollution, pollution$region=="east")
east<-subset(pollution, pollution$region=="east")
east<-subset(pollution, region=="east")
head(east)
hist(east$pm25, col="green")
west<-subset(pollution, region=="west")
hist(subset(pollution, region=="west"), col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution@latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<-subset(pollution, region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plto(speed, dist))
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red", main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
info()
bye()
library(swirl)
swirl()
quit()
library(swirl)
swirl()
dist(dataFrame)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
exit
bye()
swirl()
cmat
points(cx, cy, col=c('red', 'orange', 'purple'))
points(cx, cy, col=c('red', 'orange', 'purple'), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
which.min(distTmp, 2, which.min)
apply(distTmp, 2, which.min)
points(cx, cy,  pch=19, cex=2, col=cols1[newClust])
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx,newCy,pch=8,cex=2,col=cols1, lwd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2,2, which.min)
points(x,y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx,finalCy, pch=9, cex=2, lwd=2,col=cols1)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19,cex=2)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
points(x,y, kmeans(dataFrame,6)$cluster, pch=19, cex=2)
points(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
play
play()
rep(c(0,3),each=5)
next()
nxt()
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<- (svd1$u[,1]%*%svd1$d[1])%*%t(svd1$v[,1])
a1<- svd1$u[,1]*(svd1$d[1])%*%t(svd1$v[,1])
a1<-(svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2<-(svd1$u[,1:2] %*% svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2<-svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2<-svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2<-svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd(562:563))
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject ==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:16)
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist<- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[, 10:12], maxCon))
mdist <- dist(cbind(sub1[, 10:12], maxCon))
sub1$maxCon
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[-562:563], centers = 6)
kClust <- kmeans(sub1[,-562:563], centers = 6)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying<- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown<- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab = "Walkdown Cluster")
x = rgamma(n=1000, scale=4, shape=1)
a = c(1,2,3,4)
b = 1/a
b
xbis = 1/x
plot(xbis)
plot(x)
hist(x)
hist(xbis)
y= dgamma(sort(x),scale=4, shape=1 )
lines(sort(x), y)
lines(sort(x), y= dgamma(sort(x),scale=4, shape=1 ), lty=2)
x = rgamma(n=1000, scale=4, shape=1)
lines(sort(x), y= dgamma(sort(x),scale=4, shape=1 ), lty=2)
x = rgamma(n=1000, scale=8, shape=0.1)
x = rgamma(n=1000, scale=0.1, shape=8)
lines(sort(x), y= dgamma(sort(x),scale=0.1, shape=8 ), lty=2)
viewlines(sort(x), y= dgamma(sort(x),scale=0.1, shape=8 ), lty=2)
view=lines(sort(x), y= dgamma(sort(x),scale=0.1, shape=8 ), lty=2)
view
x = rgamma(n=1000, scale=0.1, shape=8)
head(x)
hist(x,prob=T,main='Gamma,scale=0.1')
lines(density(x),col='red',lwd=2)
lines( sort(x) , y = dgamma( sort(x) , shape = 8 , scale = 0.1 ) , col = "blue" , lty = 2 , lwd = 2 )
xbis = 1/x
hist(xbis,prob=T,main='Gamma,scale=0.1')
lines(density(xbis),col='red',lwd=2)
lines( sort(xbis) , y = dgamma( sort(xbis) , shape = 8 , scale = 0.1 ) , col = "blue" , lty = 2 , lwd = 2 )
install.packages("MCMCpack")
library(MCMCpack)
ybis = rinvgamma(n=1000, scale=0.1, shape=8)
lines(density(ybis))
lines(hist(ybis, prob=T))
hist(ybis, prob=T)
lines(density(ybis))
hist(xbis, prob=T)
x = c(85,86,87,88)
y = c(3.4, 3.6)
x = c(85,88)
plot(x,y)
lines(x,y)
plot(approx(x,y))
(approx(x,y))
x = c(60, 65)
y = c(1.5,1.8)
approx(x,y, n= 4)
approx(x,y, n= 6)
x = c(88, 90)
y = c(3.6,3.7)
approx(x,y, n= 22)
approx(x,y, n= 23)
approx(x,y, n= 12)
approx(x,y, n= 11)
x = c(75, 78)
y = c(2.5, 2.8)
approx(x,y, n= 11)
approx(x,y, n= 16)
approx(x,y, n= 22)
approx(x,y, n= 23)
approx(x,y, n= 24)
approx(x,y, n= 26)
approx(x,y, n= 27)
approx(x,y, n= 28)
approx(x,y, n= 29)
approx(x,y, n= 30)
approx(x,y, n= 32)
approx(x,y, n= 31)
x = c(85,88)
y = c(3.4, 3.6)
approx(x,y, n= 31)
b = approx(x,y, n= 31)
b[14]
b[14,14
]
b
b[[14,14]]
b$x
b$x[14]
b$y[14]
version
version
install.packages("pomp",repos="http://kingaa.github.io")
library(devtools)
library(devtools)
install_github("kingaa/pomp")
install.packages(devtools)
version
install.packages(c('devtools','curl'))
library('devtools')
install_github("kingaa/pomp")
2.27/19.70
25*0.1152284
5.65*0.1152284
5.05*0.1152284
13.21*0.1152284
6.7*0.1152284
7.49*0.1152284
5.00*0.1152284
9.45+24.99+2.1
36.54*2
9.53+25.2+2.12
36.54+36.85
4^20
7/20
10^3.4
setwd("Dropbox/reproducibleResearch/RepData_PeerAssessment1/")
source('~/.active-rstudio-document', echo=TRUE)
head(mydata)
tail(mydata)
View(mydata)
summary(mydata)
library(lubridate)
mydata = read.csv("activity.csv", header = TRUE)
type(mydata$date)
class(mydata$date)
mydata$date = as.Date(mydata$date, format= "%Y-%m-%d")
totalSteps = ddply(mydata, .(date), summarize, tot = sum(steps)
)
library(dplyr)
totalSteps = ddply(mydata, .(date), summarize, tot = sum(steps))
library(dplyr)
library(plyr)
totalSteps = ddply(mydata, .(date), summarize, tot = sum(steps))
totalStelps
totalSteps
tail(mydata)
myplot = ggplot(totalSteps, aes(x = date, y = tot)
myplot = ggplot(totalSteps, aes(x = date, y = tot) +
geom_bar(width = 0.8, position = position_dodge(width = 0.8)
)
myplot = ggplot(totalSteps, aes(x = date, y = tot)) +
geom_bar(width = 0.8, position = position_dodge(width = 0.8)
)
library(ggplot2)
myplot = ggplot(totalSteps, aes(x = date, y = tot)) +
geom_bar(width = 0.8, position = position_dodge(width = 0.8)
myplot = ggplot(totalSteps, aes(x = date, y = tot)) +
geom_bar(width = 0.8, position = position_dodge(width = 0.8)
myplot = ggplot(data = totalSteps, aes(x = totalSteps$date, y = totalSteps$tot)) +
geom_histogram(breaks=seq(20, 50, by =2),
col="red",
fill="green",
alpha = .2)
myplot
myplot = ggplot(data = totalSteps, aes(x = totalSteps$date, y = totalSteps$tot)) +
geom_histogram( col="red",
fill="green",
alpha = .2)
myplot
myplot = qgplot(totalSteps$steps, geom = "histogram")
myplot = qplot(totalSteps$steps, geom = "histogram")
myplot
myplot = qplot(totalSteps$tot, geom = "histogram")
myplot
